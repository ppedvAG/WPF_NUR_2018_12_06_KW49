<Window x:Class="Validierung.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validierung"
        mc:Ignorable="d"
        Title="MainWindow" Height="347.175" Width="381.921">
    <StackPanel Margin="10">
        <StackPanel.DataContext>
            <local:Person/>
        </StackPanel.DataContext>

        <StackPanel.Resources>
            <!--ErrorTemplates sind ControlTemplates, welche das Elemenet im Falle einer verletzten ValidationRule anzeigt-->
            <ControlTemplate x:Key="ctpTbxError">
                <StackPanel>
                    <Border BorderBrush="DarkRed" BorderThickness="3">
                        <!--AdornedElementPlaceholder sind Platzhalterelemente für das ürsprüngliche Element in
                        ErrorTemplates-->
                        <AdornedElementPlaceholder x:Name="aep"/>
                    </Border>
                    <TextBlock Foreground="Red" 
                               Text="{Binding ElementName=aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                </StackPanel>
            </ControlTemplate>
        </StackPanel.Resources>
        
        <TextBox x:Name="tbxIpInput" Validation.ErrorTemplate="{StaticResource ctpTbxError}">
            <TextBox.Text>
                <Binding ElementName="tblIpOutput" Path="Text" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--ValidationRules definieren, wann eine Eingabe durch den Benutzer eine zulässige Eingabe ist und
                        geben das Ergebnis dieser Prüfung an die GUI zurück. Im False-Fall wird gegebenenfalls ein ErrorTemplate
                        angezeigt. ValidationsRules werden als C#-Klasse abgelegt.-->
                        <local:IpValidierung/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        <TextBlock x:Name="tblIpOutput"/>
        <TextBlock x:Name="tblErrorMessage" Text="{Binding ElementName=tbxIpInput, Path=(Validation.Errors)[0].ErrorContent}"/>

        <Separator Margin="5"/>

        <!--Mit der Property ValidatesOnExceptions können vom CodeBehinde geworfene Exceptions als ValidierungsFall von der GUI aufgefangen werden-->
        <TextBox x:Name="tbxName"
                 Text="{Binding Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
        <TextBlock Text="{Binding ElementName=tbxName, Path=(Validation.Errors)[0].ErrorContent}"/>
        
        <Separator Margin="5"/>

        <!--Mit der Property ValidatesOnDataErrors können durch bestimmte Interfaces direkt in der Datenklasse ValidierungsFälle definiert werden-->
        <TextBox x:Name="tbxAlter"
                 Text="{Binding Alter, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
            <Validation.ErrorTemplate>
                <ControlTemplate>
                    <StackPanel>
                        <Border BorderBrush="Red" BorderThickness="1" x:Name="bdrAep">
                            <AdornedElementPlaceholder x:Name="aep"/>
                        </Border>
                        <Popup PlacementTarget="{Binding ElementName=bdrAep}"
                               IsOpen="{Binding ElementName=aep, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}"
                               PopupAnimation="Fade">
                            <TextBlock Foreground="White" Background="Red"
                                       Text="{Binding ElementName=aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Validation.ErrorTemplate>
        </TextBox>
        <TextBlock Text="{Binding ElementName=tbxAlter, Path=(Validation.Errors)[0].ErrorContent}"/>
        <Button Content="Übernehmen">
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <Setter Property="IsEnabled" Value="True"/>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=tbxIpInput, Path=(Validation.HasError)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=tbxName, Path=(Validation.HasError)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=tbxAlter, Path=(Validation.HasError)}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
    </StackPanel>
</Window>
