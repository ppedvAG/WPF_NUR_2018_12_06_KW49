<Window x:Class="Container.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Container"
        mc:Ignorable="d"
        Title="MainWindow" Height="585.875" Width="542.114"
        MinWidth="200">
    <!--In WPF können verschiedene Container mit unterschiedlichem Verhalten zum Layouting verwendet werden, um Controls anzuordnen-->
    <ScrollViewer HorizontalScrollBarVisibility="Auto"
                  VerticalScrollBarVisibility="Auto">
        <!--Der ScrollViewer zweigt automatisch eine ScrollBar an, wenn der Content des ScrollViewers im Fenster nicht mehr vollständig
        sichtbar ist-->
        <StackPanel>

            <Canvas Height="100">
                <!--Ein Canvas bietet seinem Content absolute Positions-Koordinaten an, an welchem die Objekte festgemacht werden-->
                <!--Über die AttachedProperties Canvas.Left und Canvas.Top (Props des Canvas, welche sich aber auf die Content-Elemente beziehen)
                kann die Position der Elemenete im Canvas definiert werden-->
                <Rectangle Fill="Green"
                       Height="20" Width="20"
                       Canvas.Top="30"
                       Canvas.Left="60"
                       Panel.ZIndex="1"/>
                <Button Content="Hallo"
                    Canvas.Top="35"
                    Canvas.Left="65"/>
            </Canvas>

            <StackPanel Orientation="Horizontal">
                <!--StackPanels 'stapeln' die beinhaltenden Elemente je nach Orientierung, wobei sie in dieser Richtung den Elementen eine minimale
                Ausdehnung gestatten, in der anderen Richtung aber eine Maximale-->
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
            </StackPanel>

            <WrapPanel>
                <!--WrapPanels agieren ähnlich wie StackPanels, verschieben jedoch die Elemente, wenn diese in einem Fenster nicht mehr sichtbar sind-->
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
                <Button Content="Button"/>
            </WrapPanel>

            <DockPanel LastChildFill="True">
                <!--In DockPanels können Elemente über die AttachedProperty DockPanel.Dock einer Seite zugewiesen werden.
                Nicht zugewiesene Elemente teilen sich den verbleibenden Platz. Die Ausrichtung der Elemente orientiert
                sich zudem an der Zuweisungsreihenfolge-->
                <Button Content="Bottom" DockPanel.Dock="Bottom"/>
                <Button Content="Left" DockPanel.Dock="Left"/>
                <Button Content="Top" DockPanel.Dock="Top"/>
                <Button Content="Right" DockPanel.Dock="Right"/>
                <Button Content="Mitte"/>
                <Button Content="Mitte"/>
                <Button Content="Mitte"/>
            </DockPanel>

            <Border BorderBrush="BlueViolet" BorderThickness="5">
                <!--Border sind grafische Elemente mit einer Content-Eigenschaft-->
                <Grid>
                    <!--In Grids müssen Spalten und Zeilen zunächst definiert werden, bevor den Elementen über Grid.Row
                    und Grid.Column eine Zelle zugeordnet wird.-->
                    <Grid.ColumnDefinitions>
                        <!--In den GridDefinitions können Spalten und Zeilen Breite/Höhe zugewiesen werden.
                        Auto    = Minimaler Platz des gröten Elements der jeweiligen Spalte/Zeile
                        *       = verbleibender Platz-->
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <Button Content="Button"/>
                    <Button Content="Btn" Grid.Column="1" Grid.Row="1"/>
                    <Button Content="Btn" Grid.Column="2" Grid.Row="0"/>
                    <Button Content="Btn" Grid.Column="3" Grid.RowSpan="2"
                    Margin="10"/>
                </Grid>
            </Border>

            <UniformGrid Columns="2" Rows="3">
                <!--In UniformGrids kann man nur die Anzahl der Spalten und Zeilen angeben. Die Zuordnung der Elemente
                zu den Zellen erfolgt durch die Reihenfolge der Elementdeklaration in Xaml. Eine Angabe von Spalten- und Zeilen-
                größe ist nicht möglich.-->
                <Button Height="20" Content="1"/>
                <Button Height="20" Content="2"/>
            </UniformGrid>

            <Viewbox Height="100" Stretch="Fill">
                <!--ViewBoxen bieten wie Images die Stretch-Property an, wodurch die Präsentation des Inhakts manipuliert werden kann-->
                <Button Content="Klick"/>
            </Viewbox>


        </StackPanel>
    </ScrollViewer>
</Window>
